'use client'

import { createContext, useContext, useEffect, useState, ReactNode } from 'react'

// Currency options with symbols and flags
export const currencies = [
  { code: 'ILS', symbol: 'â‚ª', flag: 'ðŸ‡®ðŸ‡±', name: 'Israeli New Shekel' },
  { code: 'USD', symbol: '$', flag: 'ðŸ‡ºðŸ‡¸', name: 'US Dollar' },
  { code: 'EUR', symbol: 'â‚¬', flag: 'ðŸ‡ªðŸ‡º', name: 'Euro' },
  { code: 'THB', symbol: 'à¸¿', flag: 'ðŸ‡¹ðŸ‡­', name: 'Thai Baht' },
  { code: 'GBP', symbol: 'Â£', flag: 'ðŸ‡¬ðŸ‡§', name: 'British Pound' },
  { code: 'JPY', symbol: 'Â¥', flag: 'ðŸ‡¯ðŸ‡µ', name: 'Japanese Yen' },
  { code: 'CNY', symbol: 'Â¥', flag: 'ðŸ‡¨ðŸ‡³', name: 'Chinese Yuan' },
  { code: 'CAD', symbol: '$', flag: 'ðŸ‡¨ðŸ‡¦', name: 'Canadian Dollar' },
  { code: 'AUD', symbol: '$', flag: 'ðŸ‡¦ðŸ‡º', name: 'Australian Dollar' },
  { code: 'CHF', symbol: 'Fr', flag: 'ðŸ‡¨ðŸ‡­', name: 'Swiss Franc' },
  { code: 'KRW', symbol: 'â‚©', flag: 'ðŸ‡°ðŸ‡·', name: 'South Korean Won' },
  { code: 'SGD', symbol: '$', flag: 'ðŸ‡¸ðŸ‡¬', name: 'Singapore Dollar' },
  { code: 'HKD', symbol: '$', flag: 'ðŸ‡­ðŸ‡°', name: 'Hong Kong Dollar' },
]

export type Currency = {
  code: string
  symbol: string
  flag: string
  name: string
}

type CurrencyContextType = {
  currency: Currency
  setCurrency: (currency: Currency) => void
}

const CurrencyContext = createContext<CurrencyContextType | undefined>(undefined)

export function CurrencyProvider({ children }: { children: ReactNode }) {
  const [currency, setCurrency] = useState<Currency>(() => {
    if (typeof window !== 'undefined') {
      const savedCurrency = localStorage.getItem('currency')
      return savedCurrency ? JSON.parse(savedCurrency) : currencies[0]
    }
    return currencies[0]
  })

  useEffect(() => {
    const handleStorageChange = () => {
      const savedCurrency = localStorage.getItem('currency')
      if (savedCurrency) {
        setCurrency(JSON.parse(savedCurrency))
      }
    }

    window.addEventListener('currencyChange', handleStorageChange)
    return () => {
      window.removeEventListener('currencyChange', handleStorageChange)
    }
  }, [])

  return (
    <CurrencyContext.Provider value={{ currency, setCurrency }}>
      {children}
    </CurrencyContext.Provider>
  )
}

export function useCurrency() {
  const context = useContext(CurrencyContext)
  if (context === undefined) {
    throw new Error('useCurrency must be used within a CurrencyProvider')
  }
  return context
}
